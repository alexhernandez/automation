#!/bin/bash

# Matthew Fritz and Alex Hernandez
# Bootstrapping A Laravel Project
# v1.3.0
# ===============================================================|

# VERSIONING
SCRIPT_VERSION="1.3.0"

# GLOBAL VARS
PHP=$(which php)
CURL=$(which curl)
BOWER=$(which bower)
GULP=$(which gulp)
COMPOSER=$(which composer)
LARAVEL_INSTALLER=$(which laravel)

# NPM GLOBAL VARS (WE WILL PREFER YARN OVER NPM)
YARN=$(which yarn)
NPM=$(which npm)

# COMPOSER DEPENDENCIES
COMPOSER_DEPS="laravelcollective/html barryvdh/laravel-debugbar guzzlehttp/guzzle:~6.0 tiesa/ldap:dev-master csun-metalab/laravel-proxypass:^1.0 csun-metalab/laravel-directory-authentication csun-metalab/laravel-force-https csun-metalab/laravel-guzzle"

# SERVICE PROVIDERS FROM COMPOSER
COMPOSER_SPS="Collective\\\Html\\\HtmlServiceProvider Barryvdh\\\Debugbar\\\ServiceProvider CSUNMetaLab\\\ProxyPass\\\Providers\\\ProxyPassServiceProvider CSUNMetaLab\\\Authentication\\\Providers\\\AuthServiceProvider CSUNMetaLab\\\ForceHttps\\\Providers\\\ForceHttpsServiceProvider CSUNMetaLab\\\Guzzle\\\Providers\\\GuzzleServiceProvider"

# APPLICATION EXIT CODES
E_NOERROR=0
E_DEPENDENCY=89

# DETERMINE WHETHER WE SHOULD USE DEFAULT ANSWERS TO QUESTIONS
# The script would have been started with one parameter of --use-defaults
USE_DEFAULTS=false
if [[ $# -eq 1 ]]; then
  if [[ "$1" == "--use-defaults" ]]; then
    USE_DEFAULTS=true
  fi
fi

# Echo a line of output with the given color. This function uses ANSI color codes.
# Available colors:
#   red, green, yellow, cyan
#
# Example usage:
# echo_color "red" "[ERROR] An error has occurred"
#
# The example would display a string using the ANSI color code for red
#
# ANSI color codes: http://misc.flogisoft.com/bash/tip_colors_and_formatting
function echo_color() {
  local _color=$1
  local _msg=$2

  # Output the message using the specified color using ANSI color codes and
  # ANSI-quoted strings in Bash. The \e[0m means to clear the formatting at
  # the end of the line to prevent the styles from persisting.
  if [[ ${_color} == "red" ]]; then
    echo -e $'\e[31m'"${_msg}"$'\e[0m'
  elif [[ ${_color} == "green" ]]; then
    echo -e $'\e[32m'"${_msg}"$'\e[0m'
  elif [[ ${_color} == "yellow" ]]; then
    echo -e $'\e[33m'"${_msg}"$'\e[0m'
  elif [[ ${_color} == "cyan" ]]; then
    echo -e $'\e[36m'"${_msg}"$'\e[0m'
  else
    # Invalid color specified so just output the message
    echo ${_msg}
  fi
}

# Displays a bit of information about this application
function display_toast() {
  echo_color "cyan" "laravel-bootstrap v${SCRIPT_VERSON} by Matthew Fritz and Alex Hernandez"
  echo_color "cyan" "Bootstraps a Laravel project with front-end and back-end dependencies"
  echo
}

# Asks a Y/n question of the user and provides the result as a boolean.
#
# Example usage:
# retval=$(ask_question "Would you like to do something")
#
# The user then gets prompted with the question along with " (Y/n)? " appended.
#
# Input of y* or Y* results in true; input of n* or N* results in false.
#
# You can also specify the default value when this function is being used in
# conjunction with the --use-defaults flag:
#
# Example usage:
# retval=$(ask_question "Would you like to do something" false)
#
# The user would then not be prompted and false will be the result. If the second
# parameter is not specified then true will be the result by default.
function ask_question() {
  local _question="$1"
  local _default_val=${2:-true}

  # If we are using the default answers to questions we don't really need
  # to prompt for input; we will just echo the default value instead
  if [[ ${USE_DEFAULTS} == true ]]; then
    echo $_default_val
    return;
  fi

  while true; do
    # Read input from the user but color the question line yellow using
    # Bash ANSI-quoted strings and ANSI color control codes
    read -p $'\e[33m'"$_question"$' (Y/n)?\e[0m ' _answer

    # Set default for NULL or UNSET
    # http://www.network-theory.co.uk/docs/bashref/ShellParameterExpansion.html
    case ${_answer:-y} in
    [Yy]* )
      # Function called as $(ask_question "question") so return value can be
      # captured using command substitution
      echo true
      break
      ;;
    [Nn]* )
      # Function called as $(ask_question "question") so return value can be
      # captured using command substitution
      echo false
      break
      ;;
    * )
      # No output
      :
      ;;
    esac
  done
}

# Retrieves and adds a GitHub Gist
function get_gist() {
  local _file="$1"
  local _uri="$2"

  printf "\n[INFO] Creating ${_file}...\n"

  # Prevent clobbering
  if [[ ! -e "${_file}" ]]; then
    ${CURL} -o "${_file}" "${_uri}"
    printf "\n[INFO] Your ${_file} was created successfully!\n"
  else
    printf "\n[INFO] Your ${_file} already exists so this step will be skipped\n"
  fi
}

# Installs a Node package either globally or locally.
#
# Example usage (installs Bower globally):
# install_node_package "bower" "global"
# BOWER=$(which bower)
#
# The global variable BOWER will then have the path to the globally-installed version
# of Bower.
#
# Example usage (installs socket.io locally):
# install_node_package "socket.io" "local"
function install_node_package() {
  local _package=$1
  local _mode=$2

  local _package_path=$(which ${_package})

  if [[ ! -z ${_package_path} && ${_mode} == "global" ]]; then
    echo "[INFO] ${_package} has already been installed so this step will be skipped"
    return;
  fi

  if [[ ${_mode} != "local" && ${_mode} != "global" ]]; then
    echo_color "red" "[ERROR] Mode for installing Node package must be either local or global."
    exit $E_DEPENDENCY
  fi

  local _retval=$(ask_question "Would you like to install ${_package} automatically")
  if [[ ${_retval} == false ]]; then
    echo_color "red" "[ERROR] ${_package} is a required dependency for this application."

    # Display the manual installation instructions
    if [[ ${_mode} == "global" ]]; then
      echo_color "red" "[ERROR] ${NPM} install -g ${_package}"
    else
      echo_color "red" "[ERROR] ${NPM} install ${_package} --save"
    fi

    exit $E_DEPENDENCY
  fi

  # Perform a different installation based on the mode specified; prefer Yarn
  # over NPM in all cases
  if [[ ${_mode} == "global" ]]; then
    if [[ ! -z ${YARN} ]]; then
      echo "[INFO] Installing ${_package} globally using Yarn..."
      ${YARN} global add ${_package}
    else
      echo "[INFO] Installing ${_package} globally using NPM..."
      ${NPM} install -g ${_package}
    fi
  else
    if [[ ! -z ${YARN} ]]; then
      echo "[INFO] Installing ${_package} locally using Yarn..."
      ${YARN} add ${_package}
    else
      echo "[INFO] Installing ${_package} locally using NPM..."
      ${NPM} install ${_package} --save
    fi
  fi

  # Check to see if the package exists if installed globally and exit with a
  # dependency error code if it does not
  if [[ ${_mode} == "global" && -z $(which ${_package}) ]]; then
    echo_color "red" "[ERROR] ${_package} could not be installed globally"

    if [[ ! -z ${YARN} ]]; then
      echo_color "red" "[ERROR] ${YARN} global add ${_package}"
    else
      echo_color "red" "[ERROR] ${NPM} install -g ${_package}"
    fi
    exit $E_DEPENDENCY
  fi

  echo "[INFO] ${_package} has been installed successfully!"
}

# Downloads and installs Composer if the dependency is missing
function install_composer() {
  # Make sure Composer has not already been installed
  if [[ ! -z ${COMPOSER} ]]; then
    echo "[INFO] Composer has already been installed so this step will be skipped"
    return;
  fi

  local _retval=$(ask_question "Would you like to install Composer automatically")
  if [[ ${_retval} == false ]]; then
    echo_color "red" "[ERROR] Composer is a required dependency for this application."
    echo_color "red" "[ERROR] https://getcomposer.org/download/"
    exit $E_DEPENDENCY
  fi

  # Sometimes Composer is screwy over SSL/TLS so let's ask outright; if we are
  # using the --use-defaults option this will default to false since it's just
  # installing a package manager and no credentials are being sent
  local _tls=$(ask_question "Would you like to install over SSL/TLS" false)

  # Create a /usr/local/composer directory so we can perform the installation
  # in that directory
  mkdir /usr/local/composer
  pushd /usr/local/composer

  # --- BEGIN REFACTORED COMPOSER INSTALLATION CODE ---
  # ORIGINAL: https://getcomposer.org/doc/faqs/how-to-install-composer-programmatically.md
  EXPECTED_SIGNATURE=$(${CURL} -s https://composer.github.io/installer.sig)
  ${PHP} -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_SIGNATURE=$(${PHP} -r "echo hash_file('SHA384', 'composer-setup.php');")

  if [[ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]]; then
    >&2 echo_color "red" "[ERROR] Invalid Composer installer signature"
    rm composer-setup.php
    exit $E_DEPENDENCY
  fi

  # Install Composer based on whether TLS should be enabled
  if [[ ${_tls} == true ]]; then
    ${PHP} composer-setup.php --quiet
  else
    ${PHP} composer-setup.php --quiet --disable-tls
  fi

  RESULT=$?
  rm composer-setup.php
  # --- END REFACTORED COMPOSER INSTALLATION CODE ---

  # If the composer.phar file does not exist then the installation
  # failed and we need to throw an error
  if [[ ! -e "composer.phar" ]]; then
    echo_color "red" "[ERROR] Composer installation failed so you will need to do it manually"
    echo_color "red" "[ERROR] https://getcomposer.org/download/"
    exit $E_DEPENDENCY
  fi

  # Break out of the /usr/local/composer directory
  popd

  # Make a symlink in /usr/local/bin to the composer installation and
  # then break out of that directory
  pushd /usr/local/bin
  ln -s ../composer/composer.phar composer
  popd

  echo "[INFO] Composer has been installed successfully"
}

# Installs a fresh Laravel project in the current directory
function install_laravel() {
  _laravel=$(ask_question "Would you like to create a fresh Laravel project here")
  if [[ ${_laravel} == true ]]; then
    echo "[INFO] Creating a new Laravel project. Hang tight."

    # Ensure a directory called "laravel" does not exit; otherwise, fail in
    # order to prevent unintentional cloberring
    if [[ -d "laravel" ]]; then
      echo_color "red" "[ERROR] Laravel project directory already exists"
      exit $E_DEPENDENCY
    fi

    # Use the Laravel installer if available; otherwise, fall back to the
    # Composer method
    if [[ ! -z ${LARAVEL_INSTALLER} ]]; then
      echo "[INFO] Creating Laravel project using the Laravel installer..."
      ${LARAVEL_INSTALLER} new laravel
    else
      echo "[INFO] Creating Laravel project using Composer..."
      ${COMPOSER} create-project --prefer-dist laravel/laravel
    fi

    # Push the new Laravel directory if it exists
    if [[ -d "laravel" ]]; then
      echo "[INFO] A new Laravel project has been created successfully"
    else
      echo_color "red" "[ERROR] Laravel project creation failed so you may have to do it manually"
      echo_color "red" "[ERROR] https://laravel.com/docs"
      exit $E_DEPENDENCY
    fi
  else
    echo_color "red" "[ERROR] A Laravel project is required to use this application"
    exit $E_DEPENDENCY
  fi
}

# Retrieves and installs a Composer package if it is not already present
# in the composer.json file
function get_composer_package() {
  local _package="$1"

  # Attempt to extract the package name before the version number if the
  # version number has been included. Indices in awk are 1-indexed hence
  # why we need to subtract 1 from it to use it in Bash appropriately.
  local _version_index=$(echo | awk '{ print index("'"${_package}"'", ":") }')-1
  if [[ ${_version_index} -gt 0 ]]; then
    local _package_temp="${_package:0:_version_index}"
  else
    local _package_temp="${_package}"
  fi

  # See if a line exists with the package name
  local _line=$(grep "${_package_temp}" composer.json)

  if [[ -z ${_line} ]]; then
    printf "\n[INFO] Fetching '${_package}'... \n"
    ${COMPOSER} require ${_package}
    printf "[INFO] Composer package '${_package}' was added successfully! \n"
  else
    # A package with that name has already been installed regardless of version
    printf "\n[INFO] Composer package '${_package_temp}' already exists in composer.json. Skipping.\n"
  fi
}

# Adds the Composer package service providers to the specified configuration
# file if they do not already exist.
#
# Example usage:
# add_service_providers_to_config "app.php"
function add_service_providers_to_config() {
  local _config_file="$1"

  # Update "Providers" array with any service providers not currently present
  for _service_provider in ${COMPOSER_SPS}; do
    _provider_line=$(grep "${_service_provider}::class" ${_config_file})
    if [[ -z ${_provider_line} ]]; then
      sed -i .tmp "/'providers'/ a\\
      \\        ${_service_provider}::class,\\
      " ${_config_file}

      printf "\n[INFO] Service provider '${_service_provider}' added to ${_config_file}\n"
    else
      printf "\n[INFO] Service provider '${_service_provider}' already exists in ${_config_file}. Skipping.\n"
    fi
  done
}

# Maps the specified alias to the given class in a configuration file. The alias
# will only be added if the aliased class does not already exist in the
# configuration file.
#
# Example usage:
# add_alias_to_config "app.php" "Form" "Collective\\\Html\\\FormFacade"
#
# The example will map the "Form" alias to class "Collective\\\Html\\\FormFacade"
# within the "aliases" array in the app.php configuration file.
function add_alias_to_config() {
  local _config_file="$1"
  local _alias_name="$2"
  local _aliased_class="$3"

  # Update Aliases" array if the aliased class does not already exist in the
  # configuration file
  local _line=$(grep "${_aliased_class}" ${_config_file})
  if [[ -z ${_line} ]]; then
    sed -i .tmp "/'aliases'/ a\\
    \\        '${_alias_name}'      => ${_aliased_class}::class,\\
    " ${_config_file}
    printf "\n[INFO] Alias '${_alias_name}' mapped to '${_aliased_class}' in ${_config_file}."
  else
    printf "\n[INFO] Alias class '${_aliased_class}' already exists in ${_config_file}. Skipping.\n"
  fi
}

# Display information about the application
display_toast

# GLOBAL PACKAGE/DEPENDENCY AVAILABILITY CHECK
if [[ -z ${NPM} && -z ${YARN} ]]; then
  echo_color "red" "[ERROR] Please install either Yarn or NPM to install Node packages."
  exit $E_DEPENDENCY
elif [[ -z ${PHP} ]]; then
  echo_color "red" "[ERROR] PHP was not detected on your system. Please install PHP to continue."
  exit $E_DEPENDENCY
elif [[ -z ${CURL} ]]; then
  echo_color "red" "[ERROR] Curl was not detected on your system. Please install libcurl to continue."
  exit $E_DEPENDENCY
fi
if [[ -z ${BOWER} ]]; then
  # Attempt to install Bower globally if it is missing
  echo "[INFO] It looks like you are missing Bower..."
  install_node_package "bower" "global"
  BOWER=$(which bower)
fi
if [[ -z ${GULP} ]]; then
  # Attempt to install Gulp globally if it is missing
  echo "[INFO] It looks like you are missing Gulp..."
  install_node_package "gulp" "global"
  GULP=$(which gulp)
fi
if [[ -z ${COMPOSER} ]]; then
  # Attempt to install Composer if it is missing
  echo "[INFO] It looks like you are missing Composer..."
  install_composer
  COMPOSER=$(which composer)
fi

printf "\n"

# CHECK FOR LARAVEL INSTALL
_pushed_laravel_dir=false
if [[ ! -e "artisan" ]]; then
  echo "[INFO] It appears you are not within a Laravel project directory..."

  # We're not in a Laravel installation directory but let's see if the user
  # wants to initialize a fresh project in this directory
  install_laravel

  # Push the new Laravel directory
  _pushed_laravel_dir=true
  pushd laravel
fi

# CREATE ENV + APP:KEY IF THE ENV FILE DOES NOT ALREADY EXIST
if [[ -e ".env" ]]; then
  echo "[INFO] Your env file already exists so the creation step will be skipped"
else
  _env=$(ask_question "Do you wish to add a '.env' file")
  if [[ ${_env} == true ]]; then
    cp .env.example .env
    printf "\n[INFO] Your env was updated successfully! \n"
    ${PHP} artisan key:generate
  fi
fi

printf "\n"

# CREATE LARAVEL VIEW DIRECTORIES
_view_dirs=$(ask_question "Do you wish to create master & partial views")

if [[ ${_view_dirs} == true ]]; then
  mkdir "resources/views/pages"
  _page_template_file="landing.blade.php"
  _page_template_gist_uri="https://gist.githubusercontent.com/alexhernandez/486a758fdcac73e27687/raw/7049dbe66ac814038227cccc7f3d1b6f89c5a4a6/page.blade.php"

  pushd "resources/views/pages"
    get_gist "${_page_template_file}" "${_page_template_gist_uri}"
  popd

  mkdir -p "resources/views/layouts/partials"
  _master_template_file="master.blade.php"
  _master_template_gist_uri="https://gist.githubusercontent.com/alexhernandez/bc9f4a1994732e15df3d/raw/2d7d31fa89c3d231156e255d58feb05dc294f273/master.blade.php"

  pushd "resources/views/layouts"
    get_gist "${_master_template_file}" "${_master_template_gist_uri}"
  popd

  pushd "resources/views/layouts/partials"
    touch "nav.blade.php"
    touch "header.blade.php"
    touch "footer.blade.php"
  popd

  echo "[INFO] Any missing partials have been created successfully!"
fi

printf "\n"

# ADD DEPENDENCIES
_dependencies=$(ask_question "Do you wish to add all project dependencies (bower,elixir,gulpfile,etc.)")

if [[ ${_dependencies} == true ]]; then
  # Create ".bowerrc" file
  _bower_file=".bowerrc"
  _bower_gist_uri="https://gist.githubusercontent.com/alexhernandez/c3b0d97538f5869d7f86/raw/8411a064facde1ea007585471f7683a0d546e2eb/.bowerrc"
  get_gist "${_bower_file}" "${_bower_gist_uri}"

  # Create "elixir.json" file
  _elixir_file="elixir.json"
  _elixir_gist_uri="https://gist.githubusercontent.com/alexhernandez/963c188f23e14e33929e/raw/a692c7ba6a911292d7d17875dde8c482b22c08a8/elixir.json"
  get_gist "${_elixir_file}" "${_elixir_gist_uri}"

  # Create "Gulpfile" file
  _gulp_file="gulpfile.js"
  _gulp_gist_uri="https://gist.githubusercontent.com/alexhernandez/42df05909d0dbb727ce2/raw/8d52543e942a6191b8e0b0953451e6a565c278fd/gulpfile.js"
  get_gist "${_gulp_file}" "${_gulp_gist_uri}"

  # Fetch and install all necessary Composer packages
  for _composer_package in ${COMPOSER_DEPS} ; do
    get_composer_package "${_composer_package}"
  done

  # Update config/app.php
  printf "\n"
  config_app_file="app.php"
  pushd "config"

    # Update the service providers in the configuration file
    add_service_providers_to_config ${config_app_file}

    # Update the aliases in the configuration file
    add_alias_to_config ${config_app_file} "Form" "Collective\\\Html\\\FormFacade"
    add_alias_to_config ${config_app_file} "HTML" "Collective\\\Html\\\HtmlFacade"
    add_alias_to_config ${config_app_file} "Debugbar" "Barryvdh\\\Debugbar\\\Facade"

    # Remove any .tmp files that were generated and then display the message
    # that the file was updated successfully. Otherwise we will display a
    # message regarding the lack of changes made.
    if [[ -f "${config_app_file}.tmp" ]]; then
      rm "${config_app_file}.tmp"
      printf "\n[INFO] Your ${config_app_file} was updated successfully!\n"
    else
      printf "\n[INFO] No modifications were made to your ${config_app_file}\n"
    fi
  popd

  # Now that we have our service providers available, let's go ahead and
  # publish everything necessary from the vendor packages
  printf "\n[INFO] Publishing vendor configuration and resources...\n"
  ${PHP} artisan vendor:publish
  printf "[INFO] Successfully published vendor assets!\n"

  # Add Bower to project
  # Create "bower.json" file
  printf "\n[INFO] Lets Initialize Bower... \n"
    _bower_file="bower.json"
    _bower_gist_uri="https://gist.githubusercontent.com/alexhernandez/bb21151902015a55d892/raw/2ce0791f347cb2c9ce3ca91304f1f322af248701/bower.json"
    get_gist "${_bower_file}" "${_bower_gist_uri}"

  # Install all Node Packages, --loglevel silent??? Look into this.
  printf "\n[INFO] Now installing Node dependencies... \n Hang tight. This might take a bit... \n\n"

  # Prefer Yarn over NPM while installing packages from package.json
  if [[ ! -z ${YARN} ]]; then
    ${YARN} install
  else
    ${NPM} install
  fi
fi

# Pop the Laravel directory if we had pushed into it
if [[ ${_pushed_laravel_dir} == true ]]; then
  popd
fi

# Display the final success message in green
echo_color "green" "[INFO] Yo Man... Your Laravel Application Has Been Successfully Bootstrapped!"
echo_color "green" "[INFO] Wooooooooooot!!!"
echo ""
exit $E_NOERROR